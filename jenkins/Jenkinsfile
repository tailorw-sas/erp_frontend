@Library(['PullRequestInfo', 'emailNotification']) _
import com.tailorwsas.notificaciones.NotificadorEmail

pipeline {
    
    agent any

    environment {
        SISTEMA = 'ERP'
        GITHUB_REPO = 'erp_frontend'
        GIT_TOKEN = "${env.GITHUB_TOKEN}"
        SRC = 'finamer-admin'
        ORIGIN_BRANCH_NAME = "${env.GIT_BRANCH}"
        DOCKER_IMAGE_NAME = 'tailorw/erp-admin:version'
        DOCKER_CREDENTIALS = 'Tailorw-DockerCredentials'
        NAMESPACE_DEV_QA = 'finamer'
        NAMESPACE_PROD = 'erp'
        K3S_CREDENTIALS = 'KubernetesCredential-env'
        YAML = 'finamer-admin'
        DEPLOYMENT_DEV_QA = 'finamer-admin'
        DEPLOYMENT_PROD = 'erp-admin'
        URL_DEV = "${URL_K3S_DEV}"
        URL_QA = "${URL_K3S_QA}"
        URL_PROD = "${URL_K3S}"
        EMAIL_FROM = "${env.CORREO_ORIGEN}"
        ESTADO_OK = 'OK'
        ESTADO_ERROR = 'ERROR'
        DEFAULT_EMAIL = "${env.DEFAULT_MAIL}"
        SEND_MAIL = "${SEND_MAIL_STATUS}"
    }
    
    triggers {
        githubPush()
    }
    
    stages {

        stage ('Init') {
            steps {
                echo 'Initializing......'
                script {   
                    def branch = env.ORIGIN_BRANCH_NAME.replace('origin/', '')
                    env.BRANCH_NAME = branch

                    def dockerImage = env.DOCKER_IMAGE_NAME.replace('version', env.BRANCH_NAME)
                    env.DOCKER_IMAGE = dockerImage

                    def k3sCredentials = env.K3S_CREDENTIALS.replace('env', env.BRANCH_NAME)
                    env.SERVER_K3S_CREDENTIALS = k3sCredentials

                    def prInfo = pullrequests.getPullRequestInfoByGitCommit(env.SISTEMA, env.GITHUB_REPO, env.GIT_COMMIT, env.GIT_TOKEN)
                    env.PR_TITLE = prInfo.title
                    env.PR_AUTHOR = prInfo.author
                    env.EMAIL_AUTHOR = prInfo.authorEmail
                    
                    if(env.BRANCH_NAME == 'dev'){
                        env.SERVER_K3S_URL = env.URL_DEV
                        env.EMAIL_LIST = env.EMAIL_LIST_DEV_ERP_FRONTEND
                        env.NAMESPACE = env.NAMESPACE_DEV_QA
                        env.DEPLOYMENT_NAME = env.DEPLOYMENT_DEV_QA
                    }
                    if(env.BRANCH_NAME == 'qa'){
                        env.SERVER_K3S_URL = env.URL_QA
                        env.EMAIL_LIST = env.EMAIL_LIST_QA
                        env.NAMESPACE = env.NAMESPACE_DEV_QA
                        env.DEPLOYMENT_NAME = env.DEPLOYMENT_DEV_QA
                    }
                    if(env.BRANCH_NAME == 'main'){
                        env.SERVER_K3S_URL = env.URL_PROD
                        env.EMAIL_LIST = env.EMAIL_LIST_PROD
                        env.NAMESPACE = env.NAMESPACE_PROD
                        env.DEPLOYMENT_NAME = env.DEPLOYMENT_PROD
                    }
                }
            }
        }

        stage ('Create docker image'){
            steps {
                sh 'docker build -t $DOCKER_IMAGE .'
                withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS}", url: "") {
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage ('Publish to Kubernetes') {
            steps {
                withKubeConfig(credentialsId: "${SERVER_K3S_CREDENTIALS}", namespace: "${NAMESPACE}", restrictKubeConfigAccess: false, serverUrl: "${SERVER_K3S_URL}") {
                    //sh 'kubectl apply -f $YAML'
                    //sh 'kubectl rollout restart deploy $DEPLOYMENT_NAME'
                }
            }
        }
    }

    post {
        success {
            script {
                if(env.SEND_MAIL == 'SI'){
                    def notificator = new NotificadorEmail(this)
                    notificator.sendEmail(env.EMAIL_AUTHOR, env.EMAIL_LIST, env.EMAIL_FROM, env.SRC, env.SISTEMA, env.BRANCH_NAME, env.ESTADO_OK, env.PR_TITLE, env.PR_AUTHOR)
                }
            }
        }
        failure {
            script {
                if(env.SEND_MAIL == 'SI'){
                    def notificator = new NotificadorEmail(this)
                    notificator.sendEmail(env.EMAIL_AUTHOR, env.EMAIL_LIST, env.EMAIL_FROM, env.SRC, env.SISTEMA, env.BRANCH_NAME, env.ESTADO_ERROR, env.PR_TITLE, env.PR_AUTHOR)
                }
            }
        }
    }
}